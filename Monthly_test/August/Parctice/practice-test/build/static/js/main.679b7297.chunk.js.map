{"version":3,"sources":["reducers/loginReducer.js","store/store.js","config/weburl.js","components/login.component.js","components/profile.component.js","route/index.js","RouteManagement/PrivateRoute.js","RouteManagement/PublicRoute.js","App.js","serviceWorker.js","index.js"],"names":["userModel","firstname","lastname","email","image","initialState","loginReducer","state","action","type","user","payload","store","createStore","Login","onSignInClick","e","a","preventDefault","auth","signIn","history","props","access_token","currentUser","get","wc","user_info","rt","localStorage","setItem","JSON","stringify","tV","uT","$t","TJ","saveUser","push","window","gapi","load","client","init","clientId","googleKeys","web","client_id","scope","then","auth2","getAuthInstance","onClick","this","className","Component","connect","dispatch","profile","clickedLogoutButton","console","log","clear","isSignedIn","signOut","urls","id","src","alt","width","height","routes","path","exact","isProtected","component","Profile","PrivateRoute","rest","isAuth","getItem","render","routeProps","to","PublicRoute","App","parse","_","map","route","idx","key","React","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.679b7297.chunk.js","sourcesContent":["export const SAVE_USER = '@@user/save';\n\nconst userModel = {\n    firstname: '',\n    lastname: '',\n    email: '',\n    image: ''\n}\n\nconst initialState = {};\n\nconst loginReducer = function(state, action) {\n    state = state || initialState;\n\n    switch (action.type) {\n        case SAVE_USER:\n            const user = {\n                ...userModel, \n                firstname: action.payload.firstname, \n                lastname: action.payload.lastname, \n                email: action.payload.email,\n                image: action.payload.image\n            };\n            // return user;\n            return {...state, ...user};\n        default:\n            return state;\n    }\n};\n\nexport default loginReducer;","import { createStore } from 'redux';\n\nimport loginReducer from '../reducers/loginReducer';\n\nconst store = createStore(loginReducer);\n\nexport default store;","export default {\n    signIn: '/',\n    profile: '/profile',\n};","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { SAVE_USER } from '../reducers/loginReducer';\nimport googleKeys from '../config/google.json';\n\nclass Login extends Component {\n    componentDidMount() {\n        window.gapi.load('client:auth2', () => {\n            window.gapi.client\n                .init({\n                    clientId: googleKeys.web.client_id,\n                    // scope: 'email profile openid https://www.googleapis.com/auth/youtube',\n                    scope: 'email profile openid',\n                })\n                .then(() => {\n                    this.auth = window.gapi.auth2.getAuthInstance();\n                    // console.dir(this.auth.currentUser.get())\n                    // this.onAuthChange(this.auth.isSignedIn.get());\n                    // this.auth.isSignedIn.listen(this.onAuthChange);\n                });\n        });\n    };\n\n    onSignInClick = async (e) => {\n        e.preventDefault();\n        await this.auth.signIn();\n        const { history } = this.props;\n        // console.log(this.auth.currentUser.get().getId());\n        // console.log(this.auth.currentUser.get());\n        let access_token = this.auth.currentUser.get().wc.access_token;\n        let user_info = this.auth.currentUser.get().rt;\n        localStorage.setItem('access_token', access_token);\n        localStorage.setItem('user_info', JSON.stringify({firstname: user_info.tV, lastname: user_info.uT, email: user_info.$t, image: user_info.TJ}));\n        this.props.saveUser(user_info.tV, user_info.uT, user_info.$t, user_info.TJ);\n        history.push('/profile');\n    }\n\n    \n    render() {\n        return (\n            <form>\n                <h3>Sign In</h3>\n                <button onClick={this.onSignInClick} className=\"btn btn-primary btn-block\">\n                    Sign In with Google\n                 </button>\n            </form>\n        );\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        saveUser: (firstname, lastname, email, image) => dispatch({ type: SAVE_USER, payload: { firstname, lastname, email, image } })\n    }\n};\n\nexport default connect(null, mapDispatchToProps)(Login);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport googleKeys from '../config/google.json';\nimport { urls } from '../config';\n\nexport class profile extends Component {\n\n    componentDidMount() {\n        window.gapi.load('client:auth2', () => {\n          window.gapi.client\n            .init({\n              clientId: googleKeys.web.client_id,\n              scope: 'email profile openid',\n            })\n            .then(() => {\n                this.auth = window.gapi.auth2.getAuthInstance();\n            });\n        });\n      }\n\n    clickedLogoutButton = async (e) => {\n        e.preventDefault();\n        console.log('logout button clicked');\n        const { history } = this.props;\n        localStorage.clear();\n        if (this.auth.isSignedIn.get()) {\n            this.auth.signOut();\n        };\n        history.push(urls.signIn);\n      }\n    render() {\n        // data coming from redux store\n        const { user_info } = this.props;\n        console.log('userdata from redux store --> ', user_info);\n\n        // let user_info = JSON.parse(localStorage.getItem('user_info'));\n        let firstname, lastname, email, image;\n        if (user_info) {\n            firstname = user_info.firstname;\n            lastname = user_info.lastname;\n            email = user_info.email;\n            image = user_info.image;\n        };\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"span4 well\">\n                        <div className=\"row\">\n                            <div className=\"span1\" id=\"img\"><img src={image} alt=\"\" width=\"100px\" height=\"100px\"/></div>\n                                <div className=\"span3\">\n                                    <p>{email}</p>\n                                    <p><strong>{`${firstname} ${lastname}`}</strong></p>\n                                    <span className=\" badge badge-warning\">8 messages</span> <span className=\" badge badge-info\">15 followers</span>\n                                </div>\n                                <button id=\"logout\" type=\"button\" className=\"btn btn-danger btn-block btn-sm\" onClick={this.clickedLogoutButton}>Sign Out</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n};\n\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n        user_info: state\n    }\n};\n\nexport default connect(mapStateToProps)(profile);\n","// method 1 (importing directly from components) ----->\n// import Login from \"../components/login.component\";\n// import SignUp from \"../components/signup.component\";\n\n\n// method 2 (importing in index.js of components and exporting from there) ----->\n// import { Login, SignUp } from \"../components/index\";\n\n\n//method 3 (directly exporting from index.js of components) ----->\nimport { Login, Profile } from \"../components\";\n\nimport {urls} from \"../config\";\n\nconst routes = [\n    {\n        path: urls.signIn,\n        exact: true,\n        isProtected: false,\n        component: Login\n    },\n    {\n        path: urls.profile,\n        exact: true,\n        isProtected: true,\n        component: Profile\n    }\n];\n\nexport default routes;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { urls } from '../config';\nconst PrivateRoute = (props) => {\n  const { component: Component, ...rest } = props;\n  const isAuth = !!localStorage.getItem('access_token');\n  return (\n    <Route\n      {...rest}\n      render={(routeProps)=> {\n        return(\n          isAuth ?\n            <Component {...rest}  {...routeProps} /> :\n            <Redirect to={urls.signIn} />\n        );\n      }}\n    />\n  );\n};\n\nexport default PrivateRoute;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { urls } from '../config';\n\nconst PublicRoute = (props) => {\n  const { component: Component, ...rest } = props;\n  const isAuth = !!localStorage.getItem('access_token');\n  return (\n    <Route\n      {...rest}\n      render={(routeProps)=> {\n          return(\n          isAuth ?\n              <Redirect to={urls.profile} /> :\n              <Component {...rest}  {...routeProps} />\n          );\n      }}\n    />\n  );\n};\n\nexport default PublicRoute;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Link } from \"react-router-dom\";\nimport _ from 'lodash';\nimport { urls } from './config';\nimport { connect } from 'react-redux';\nimport { SAVE_USER } from './reducers/loginReducer';\n\nimport routes from './route/index';\nimport { PublicRoute, PrivateRoute } from './RouteManagement';\n\nclass App extends React.Component {\n\n  componentDidMount() {\n    let user_info = JSON.parse(localStorage.getItem('user_info'));\n    if (user_info) {\n        let firstname = user_info.firstname;\n        let lastname = user_info.lastname;\n        let email = user_info.email;\n        let image = user_info.image;\n        this.props.saveUser(firstname, lastname, email, image);\n    };\n};\n  render() {\n    return (<Router>\n      <div className=\"App\">\n        <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\n          <div className=\"container\">\n            <Link className=\"navbar-brand\" to={urls.signIn}>Practice App</Link>\n            <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n              <ul className=\"navbar-nav ml-auto\">\n                <li className=\"nav-item\">\n                  <Link className=\"nav-link\" to={urls.signIn}>Sign In</Link>\n                </li>\n                <li className=\"nav-item\">\n                </li>\n              </ul>\n            </div>\n          </div>\n        </nav>\n\n        <div className=\"auth-wrapper\">\n          <div className=\"auth-inner\">\n            <Switch>\n              {\n                _.map(routes, (route, idx) => {\n                  return (\n                    route.isProtected ?\n                      <PrivateRoute key={idx} {...route} /> :\n                      <PublicRoute key={idx} {...route} />\n                  )\n                })\n              }\n            </Switch>\n          </div>\n        </div>\n      </div></Router>\n    );\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n      saveUser: (firstname, lastname, email, image) => dispatch({ type: SAVE_USER, payload: {firstname, lastname, email, image} })\n  }\n};\n\nexport default connect(null, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}